import java.util.regex.*;
import java.io.*;
import java.nio.file.*;
import java.util.function.Predicate;

public class ComprobadorClave implements Runnable {
    private final String clave;
    private final Path rutaRegistro = Paths.get("historial_claves.txt");

    public ComprobadorClave(String clave) {
        this.clave = clave;
    }

    @Override
    public void run() {
        boolean valida = evaluarClave(clave);
        String estado = valida ? "CORRECTA" : "INCORRECTA";

        System.out.println("Clave: " + clave + " → " + estado);

        try (BufferedWriter writer = Files.newBufferedWriter(rutaRegistro,
                StandardOpenOption.CREATE, StandardOpenOption.APPEND)) {
            writer.write("Clave: " + clave + " → " + estado);
            writer.newLine();
        } catch (IOException ex) {
            System.out.println("Error al guardar en el archivo: " + ex.getMessage());
        }
    }

    private boolean evaluarClave(String texto) {
        Predicate<String> largoMinimo = str -> str.length() >= 8;
        Predicate<String> mayusculas = str -> contar(str, "[A-Z]") >= 2;
        Predicate<String> minusculas = str -> contar(str, "[a-z]") >= 3;
        Predicate<String> digitos = str -> contar(str, "\\d") >= 1;
        Predicate<String> simbolos = str -> contar(str, "[!@#$%^&*()\\-_=+<>?]") >= 1;

        return largoMinimo.and(mayusculas)
                          .and(minusculas)
                          .and(digitos)
                          .and(simbolos)
                          .test(texto);
    }

    private int contar(String texto, String regex) {
        Matcher m = Pattern.compile(regex).matcher(texto);
        int veces = 0;
        while (m.find()) veces++;
        return veces;
    }
}
